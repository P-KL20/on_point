import 'package:flutter/material.dart';
import '../services/firestore_service.dart';

/// The BudgetService class is responsible for managing budget-related
/// functionalities, including fetching budget values, validating custom
/// category names, and saving budgets to Firestore.
/// It provides methods to normalize category names, validate custom
/// category names against existing ones, and validate and save budgets.
/// It also provides methods to calculate the total budget from
/// amount controllers and check if a budget exists for a specified month.
class BudgetService {
  final FirestoreService _firestoreService = FirestoreService();
  static const double defaultBudgetLimit =
      2000; // Default max budget if not set manually

  String normalizeCategory(String input) {
    return input.trim().toLowerCase().replaceFirstMapped(
      RegExp(r'^[a-z]'),
      (m) => m.group(0)!.toUpperCase(),
    );
  }

  // Fetches the budget value for a given category for the current month
  Future<double> getCategoryBudget(String category) async {
    final now = DateTime.now();
    final budgets = await _firestoreService.getSavedBudgetsByMonth(
      now.year,
      now.month,
    );
    return budgets[category] ?? 0.0;
  }

  // Validates a custom category name against existing and standard names.
  String? validateCustomNameConflict({
    required String input,
    required List<String> standardCategories,
    required List<TextEditingController> existingCustomControllers,
    int? skipIndex,
  }) {
    final normalized = normalizeCategory(input);
    if (normalized.isEmpty) return "Category name can't be empty.";

    final usedNames = <String>{
      ...standardCategories.map((e) => e.toLowerCase()),
    };

    for (int i = 0; i < existingCustomControllers.length; i++) {
      if (skipIndex != null && i == skipIndex) continue;
      usedNames.add(existingCustomControllers[i].text.trim().toLowerCase());
    }

    if (usedNames.contains(normalized.toLowerCase())) {
      return "Category '$normalized' already exists or duplicates a standard category.";
    }
    return null;
  }

  // Called when adding a custom category (initial check with autogenerated name)
  Future<String?> validateNewCustomCategory({
    required String newCategoryRawName,
    required List<String> standardCategories,
    required List<TextEditingController> existingCustomControllers,
  }) async {
    return validateCustomNameConflict(
      input: newCategoryRawName,
      standardCategories: standardCategories,
      existingCustomControllers: existingCustomControllers,
    );
  }

  // Validates and saves the budget into Firestore
  Future<String?> validateAndSaveBudget({
    required List<String> standardCategories,
    required List<TextEditingController> customControllers,
    required List<TextEditingController> amountControllers,
    double? userDefinedCap,
    required String targetMonth,
  }) async {
    final Set<String> seen = {};
    final Map<String, double> data = {};
    final maxCap = userDefinedCap ?? defaultBudgetLimit;

    // Standard categories
    for (int i = 0; i < standardCategories.length; i++) {
      final amount = double.tryParse(amountControllers[i].text) ?? 0;
      if (amount > 0) data[standardCategories[i]] = amount;
    }

    // Custom categories
    for (int i = 0; i < customControllers.length; i++) {
      final name = customControllers[i].text;
      final normalized = normalizeCategory(name);
      final amountText = amountControllers[standardCategories.length + i].text;
      final amount = double.tryParse(amountText) ?? 0;

      if (normalized.isEmpty) return "Category name can't be empty.";

      if (standardCategories
              .map((e) => e.toLowerCase())
              .contains(normalized.toLowerCase()) ||
          seen.contains(normalized.toLowerCase())) {
        return "Category '$normalized' already exists or duplicates standard category.";
      }

      if (amount > 0) {
        data[normalized] = amount;
        seen.add(normalized.toLowerCase());
      }
    }

    final totalBudget = data.values.fold(0.0, (a, b) => a + b);
    if (totalBudget > maxCap) {
      return "Your total budget exceeds the limit of \$${maxCap.toStringAsFixed(0)}.";
    }

    if (data.isEmpty) return "Please enter at least one category with amount.";

    await _firestoreService.saveBudget(data, targetMonth);
    return null;
  }

  // Calculates the total budget from amount controllers.
  double calculateCurrentTotal({
    required List<TextEditingController> amountControllers,
  }) {
    return amountControllers.fold(0.0, (sum, controller) {
      final value = double.tryParse(controller.text.trim()) ?? 0.0;
      return sum + value;
    });
  }

  // Checks if a budget exists for the specified month.
  Future<bool> checkIfBudgetExists(String targetMonth) async {
    final parts = targetMonth.split('-');
    final year = int.parse(parts[0]);
    final month = int.parse(parts[1]);
    return await _firestoreService.isMonthBudgetSet(year, month);
  }
}
